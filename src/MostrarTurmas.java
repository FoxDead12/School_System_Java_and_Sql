
import Classes.DataBaseQuerys;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author david
 */
public class MostrarTurmas extends javax.swing.JInternalFrame {

    /**
     * Creates new form MostrarTurmas
     */
    public MostrarTurmas() {
        initComponents();
        
        SelecionarMetodoPesquisa(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaTurmas = new javax.swing.JTable();
        txtpesquisa = new javax.swing.JTextField();
        boxPesquisa = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaAlunosTurma = new javax.swing.JTable();
        txtNomeTurma = new javax.swing.JLabel();
        btnAddNote = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableAdicionarNotas = new javax.swing.JTable();
        boxDisciplina = new javax.swing.JComboBox<>();
        btnInserirNotas = new javax.swing.JButton();
        btnvoltar = new javax.swing.JButton();
        txterrorNotas = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Mostrar Turmas");

        tabelaTurmas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tabelaTurmas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo ", "Nome", "Ano ", "Formação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaTurmas.setIntercellSpacing(new java.awt.Dimension(2, 2));
        tabelaTurmas.setRowHeight(30);
        tabelaTurmas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaTurmasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaTurmas);

        txtpesquisa.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        txtpesquisa.setText("Procurar Turma");
        txtpesquisa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtpesquisaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpesquisaFocusLost(evt);
            }
        });
        txtpesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                none(evt);
            }
        });
        txtpesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpesquisaKeyReleased(evt);
            }
        });

        boxPesquisa.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        boxPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "Codigo", "Formação" }));
        boxPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxPesquisaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtpesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(boxPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1451, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtpesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ver Turmas", jPanel2);

        tabelaAlunosTurma.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tabelaAlunosTurma.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Numero", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAlunosTurma.setRowHeight(30);
        tabelaAlunosTurma.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tabelaAlunosTurma);
        if (tabelaAlunosTurma.getColumnModel().getColumnCount() > 0) {
            tabelaAlunosTurma.getColumnModel().getColumn(2).setHeaderValue("Email");
        }

        txtNomeTurma.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N

        btnAddNote.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        btnAddNote.setText("Adicionar Notas");
        btnAddNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1451, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNomeTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddNote)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtNomeTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddNote, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ver Turma", jPanel1);

        tableAdicionarNotas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tableAdicionarNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Numero", "Notas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAdicionarNotas.setRowHeight(30);
        tableAdicionarNotas.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableAdicionarNotas);

        boxDisciplina.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N

        btnInserirNotas.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        btnInserirNotas.setText("Inserir Notas");
        btnInserirNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirNotasActionPerformed(evt);
            }
        });

        btnvoltar.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        btnvoltar.setText("Voltar");
        btnvoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnvoltarActionPerformed(evt);
            }
        });

        txterrorNotas.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1451, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnInserirNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnvoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txterrorNotas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(boxDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnvoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txterrorNotas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnInserirNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        jTabbedPane1.addTab("Adicionar Notas", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 828, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1500, 869);
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaTurmasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaTurmasMouseClicked
        // TODO add your handling code here:

        MostarLinhaCarregada();
    }//GEN-LAST:event_tabelaTurmasMouseClicked

    private void none(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_none
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_none

    private void boxPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxPesquisaActionPerformed
        // TODO add your handling code here:
         SelecionarMetodoPesquisa(boxPesquisa.getSelectedIndex());
    }//GEN-LAST:event_boxPesquisaActionPerformed

    private void txtpesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpesquisaKeyReleased
        // TODO add your handling code here:
        
        Carregar_Turmas(txtpesquisa.getText());
    }//GEN-LAST:event_txtpesquisaKeyReleased

    private void txtpesquisaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpesquisaFocusLost
        // TODO add your handling code here:
        if(txtpesquisa.getText().equals(""))
            txtpesquisa.setText("Procurar Turma");
    }//GEN-LAST:event_txtpesquisaFocusLost

    private void txtpesquisaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpesquisaFocusGained
        // TODO add your handling code here:
        txtpesquisa.setText("");
    }//GEN-LAST:event_txtpesquisaFocusGained

    private void btnAddNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNoteActionPerformed
        // TODO add your handling code here:
        
        
        jTabbedPane1.setSelectedIndex(2);
       
       /* DefaultTableModel model = (DefaultTableModel) tabelaAlunosTurma.getModel();
        model.addColumn("Notas");
        model.addColumn("asd");*/
        
    }//GEN-LAST:event_btnAddNoteActionPerformed

    private void btnvoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnvoltarActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_btnvoltarActionPerformed

    private void btnInserirNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirNotasActionPerformed
        // TODO add your handling code here:
        
        
        InserirNotas();
    }//GEN-LAST:event_btnInserirNotasActionPerformed

    
    // MINHAS FUNÇÕES
    
    boolean jaClicou = false;
    int ultimaLinha;
    int ultimaColuna;
    
    int ModoPesquisaAtiva;
    
    
    boolean adicionarNota = false;
    
    void SelecionarMetodoPesquisa(int index){
        
        //0 Nome
        //1 Numero
        //2 Curso
        ModoPesquisaAtiva = index;
        txtpesquisa.setText("Procurar Turma");
        Carregar_Turmas("");
    }
    
    void Carregar_Turmas(String pesquisaTxt){
        
        if(tabelaTurmas.getRowCount() > 0){
            DefaultTableModel dtm = (DefaultTableModel) tabelaTurmas.getModel();
            dtm.setNumRows(0); 
        }
        
        
        DataBaseQuerys baseDados = new DataBaseQuerys();
        Connection conn = baseDados.getDataBaseQuerys();
        
        
         try{
            PreparedStatement statement = null;
             
             
            switch(ModoPesquisaAtiva){
                
                case 0:
                    statement = conn.prepareStatement("SELECT * FROM turmas t, formacoes f, cursos c WHERE t.id_curso = c.ID_CURSO AND t.NOME_TURMA LIKE '%"+ pesquisaTxt +"%' AND f.ID_FORMACAO = c.ID_FORMACAO ORDER BY f.ID_FORMACAO DESC");
                break;
                
                
                case 1:
                    statement = conn.prepareStatement("SELECT * FROM turmas t, formacoes f, cursos c WHERE t.id_curso = c.ID_CURSO AND t.Codigo_Turma LIKE '%"+ pesquisaTxt +"%' AND f.ID_FORMACAO = c.ID_FORMACAO ORDER BY f.ID_FORMACAO DESC");
                    break;
                    
                case 2:
                    statement = conn.prepareStatement("SELECT * FROM turmas t, formacoes f, cursos c WHERE t.id_curso = c.ID_CURSO AND f.NOME_FORMACAO LIKE '%"+ pesquisaTxt +"%' AND f.ID_FORMACAO = c.ID_FORMACAO ORDER BY f.ID_FORMACAO DESC");
                    break;
            }
            
            
            
            ResultSet rs = statement.executeQuery();
            
            while(rs.next()){
            
                DefaultTableModel model = (DefaultTableModel) tabelaTurmas.getModel();
                model.addRow(new Object[]{rs.getString("Codigo_Turma"),rs.getString("NOME_TURMA"),rs.getInt("Ano"),rs.getString("NOME_FORMACAO")});
            }
            
            
            
        }catch(SQLException ex){
            
            System.out.print(ex);
        }
    }

    void MostarLinhaCarregada(){
       
        int rowIndex = tabelaTurmas.getSelectedRow();
        int columIndex = tabelaTurmas.getSelectedColumn();
        DefaultTableModel dtm = (DefaultTableModel) tabelaTurmas.getModel();
        
        if(jaClicou == false){
            ultimaLinha = rowIndex;
            ultimaColuna = columIndex;
            
            jaClicou = true;
        }
        else{
            
            if(rowIndex == ultimaLinha && columIndex == ultimaColuna){
                jaClicou = false;
                //Abrir a info dos alunos
                CarregarDadosAlunos(dtm.getValueAt(rowIndex, 0).toString());
                jTabbedPane1.setSelectedIndex(1);
                
            }
            else{
                ultimaLinha = rowIndex;
                ultimaColuna = columIndex;
            }
        }  
    }
     
    void CarregarDadosAlunos(String numero){
         
         System.out.print(numero);
         
         if(tabelaAlunosTurma.getRowCount() > 0){
            DefaultTableModel dtm = (DefaultTableModel) tabelaAlunosTurma.getModel();
            dtm.setNumRows(0); 
        }
        
         boxDisciplina.removeAllItems();
         
         
        DataBaseQuerys baseDados = new DataBaseQuerys();
        Connection conn = baseDados.getDataBaseQuerys();
        
        
         try{
            
            PreparedStatement statement = conn.prepareStatement("SELECT * FROM turmas t, aluno a WHERE a.id_turma = t.id_turma AND t.Codigo_Turma = '"+ numero +"'");
            ResultSet rs = statement.executeQuery();
            
            while(rs.next()){
            
                txtNomeTurma.setText("Turma " + rs.getString("Nome_Turma"));
                DefaultTableModel model = (DefaultTableModel) tabelaAlunosTurma.getModel();
                model.addRow(new Object[]{rs.getString("NOME_ALUNO"),rs.getString("NUMERO_ALUNO"),rs.getString("EMAILESCOLAR_ALUNO")});
                
                DefaultTableModel model1 = (DefaultTableModel) tableAdicionarNotas.getModel();
                model1.addRow(new Object[]{rs.getString("NOME_ALUNO"),rs.getString("NUMERO_ALUNO"),});
                
                
            }
            
            
            
        }catch(SQLException ex){
            
            System.out.print(ex);
        }
         
         
         
         
         try{
            
            PreparedStatement statement = conn.prepareStatement("SELECT d.DIMINUITIVO_DISCIPLINA, d.ID_DISCIPLINA FROM turmas t, cursos c, cursodisciplina cd, disciplinas d \n" +
            "WHERE t.id_curso = c.ID_CURSO AND c.ID_CURSO = cd.ID_CURSO AND cd.ID_DISCIPLINA = d.ID_DISCIPLINA AND t.Codigo_Turma = " + numero + "");
            ResultSet rs = statement.executeQuery();
            
            while(rs.next()){
            
               
               boxDisciplina.addItem(rs.getString("DIMINUITIVO_DISCIPLINA"));
            }
            
           
            
        }catch(SQLException ex){
            
            System.out.print(ex);
        }
          
         
         
     }
    
    void InserirNotas(){
        
        
        
        if(VerificarTabela(tableAdicionarNotas) == false){
        
            DefaultTableModel dtm = (DefaultTableModel) tableAdicionarNotas.getModel();
            for(int i = 0; i <= tableAdicionarNotas.getRowCount() - 1; i++){
            
                DataBaseQuerys baseDados = new DataBaseQuerys();
                Connection conn = baseDados.getDataBaseQuerys();
                try{

                    PreparedStatement statement = conn.prepareStatement("INSERT INTO nota (ID_NOTA, VALOR_NOTA, ID_ALUNO, ID_DISCIPLINA) VALUES\n" +
                    "(\n" +
                    "(SELECT SUM(T.SOMA) FROM (SELECT MAX(ID_NOTA) + 1 AS SOMA FROM nota UNION SELECT 0 AS SOMA FROM aluno) T),\n" +
                    ""+ Float.parseFloat(dtm.getValueAt(i, 2).toString()) +",\n" +
                    "(SELECT a.ID_ALUNO FROM aluno a WHERE a.NUMERO_ALUNO = '"+ dtm.getValueAt(i, 1).toString() +"'),\n" +
                    "(SELECT d.ID_DISCIPLINA FROM disciplinas d WHERE d.DIMINUITIVO_DISCIPLINA = '"+ boxDisciplina.getSelectedItem() +"')\n" +
                    "\n" +
                    ")");
                    int rows = statement.executeUpdate();

                    

                }catch(SQLException ex){

                    System.out.print(ex );
                }
            }
            
        }
        else{
            
            txterrorNotas.setText("Coloque dados validos");
        }
        
        
        
    }
    
    boolean VerificarTabela(JTable table){
        
        boolean invalido = false;
         DefaultTableModel dtm = (DefaultTableModel) table.getModel();
         
         
        for(int i = 0; i <= table.getRowCount() - 1; i++){
            
            
            if(dtm.getValueAt(i, 2) == null){
                
                  invalido = true;             
            } 
            
            if(Float.parseFloat(dtm.getValueAt(i, 2).toString()) > 20 || Float.parseFloat(dtm.getValueAt(i, 2).toString()) < 0){
                
                invalido = true;    
            }
        }
        
        
        if(invalido == true){
            
            System.out.print("\nEsta tabela náo esta completa");
        }
        else{
            
            System.out.print("\nEsta tabela esta completa");
        }
        
        
        return invalido;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxDisciplina;
    private javax.swing.JComboBox<String> boxPesquisa;
    private javax.swing.JButton btnAddNote;
    private javax.swing.JButton btnInserirNotas;
    private javax.swing.JButton btnvoltar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tabelaAlunosTurma;
    private javax.swing.JTable tabelaTurmas;
    private javax.swing.JTable tableAdicionarNotas;
    private javax.swing.JLabel txtNomeTurma;
    private javax.swing.JLabel txterrorNotas;
    private javax.swing.JTextField txtpesquisa;
    // End of variables declaration//GEN-END:variables
}
